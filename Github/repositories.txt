# Respositories
# This chapter digs a little deeper into how Git stores information and how you can explore a repository's history.

# What is a hash?
Every commit to a repository has a unique identifier called a hash (since it is generated by running the changes through a pseudo-random number generator 
called a hash function). This hash is normally written as a 40-character hexadecimal string like 7c35a3ce607a14953f070f0f83b5d74c2296ef93, but most of 
the time, you only have to give Git the first 6 or 8 characters in order to identify the commit you mean.

# How can I view a specific commit?
git show
To view the details of a specific commit, you use the command git show with the first few characters of the commit's hash. 

When working with git log, Reminder: press the space bar to page down through git log's output and q to quit the paged display.

# What is Git's equivalent of a relative path?
A hash is like an absolute path: it identifies a specific commit.
To understand previous commits we need to make use of tilde ~. For the previous commit HEAD~1, two commits previous HEAD~2

# How can I see who changed what in a file?
git annotate file

Shows who made the last change to each line of a file and when. The output will provide details by each distinct hash value. Be careful, there can be multiple
changes made to the same hashes

# How can I see what changed between two commits?
git diff ID1..ID2

..: shows the changes between two IDs. The .. works as a connector.

To see changes in the repo can use: git diff HEAD..HEAD~2, reviews the changes between current state and its state two commits previous

# How do I add new files?
Git does not track files by default. Instead, it waits until you have used git add at least once before it starts paying attention to a file.

git add

git status will always tell you about files that are in your repository but aren't (yet) being tracked.
After using gid add filename, then git commit -m "", to add a tracking message the new file can now be tracked

# How do I tell Git to ignore certain files?
Data analysis often produces temporary or intermediate files that you don't want to save. You can tell it to stop paying attention to files you 
don't care about by creating a file in the root directory of your repository called .gitignore and storing a list of wildcard patterns that specify 
the files you don't want Git to pay attention to. For example, if .gitignore contains:

build
*.mpl
then Git will ignore any file or directory called build (and, if it's a directory, anything in it), as well as any file whose name ends in .mpl.

# How can I remove unwanted files?
Git can help you clean up files that you have told it you don't want. The command git clean -n will show you a list of files that are in the repository, 
but whose history Git is not currently tracking. A similar command git clean -f will then delete those files.

Use this command carefully: git clean only works on untracked files, so by definition, their history has not been saved. If you delete them with 
git clean -f, they're gone for good.

# How can I see how Git is configured?
Like most complex pieces of software, Git allows you to change its default settings. To see what the settings are, you can use the command 
git config --list with one of three additional options:

--system: settings for every user on this computer.
--global: settings for every one of your projects.
--local: settings for one specific project.

Each level overrides the one above it, so local settings (per-project) take precedence over global settings (per-user), which in turn take 

git config --list --local
Displays the settings at the local level

# How can I change my Git configuration?
Most of Git's settings should be left as they are. However, there are two you should set on every computer you use: your name and your email address. 
These are recorded in the log every time you commit a change, and are often used to identify the authors of a project's content in order to give credit 
(or assign blame, depending on the circumstances).

To change a configuration value for all of your projects on a particular computer, run the command:

git config --global setting value
Using this command, you specify the setting you want to change and the value you want to set. The settings that identify your name and email address 
are user.name and user.email, respectively.

git config --global user.email user@outlook.com

precedence over system settings (for all users on the computer).
