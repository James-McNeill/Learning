# Respositories
# This chapter digs a little deeper into how Git stores information and how you can explore a repository's history.

# What is a hash?
Every commit to a repository has a unique identifier called a hash (since it is generated by running the changes through a pseudo-random number generator 
called a hash function). This hash is normally written as a 40-character hexadecimal string like 7c35a3ce607a14953f070f0f83b5d74c2296ef93, but most of 
the time, you only have to give Git the first 6 or 8 characters in order to identify the commit you mean.

# How can I view a specific commit?
git show
To view the details of a specific commit, you use the command git show with the first few characters of the commit's hash. 

When working with git log, Reminder: press the space bar to page down through git log's output and q to quit the paged display.

# What is Git's equivalent of a relative path?
A hash is like an absolute path: it identifies a specific commit.
To understand previous commits we need to make use of tilde ~. For the previous commit HEAD~1, two commits previous HEAD~2

