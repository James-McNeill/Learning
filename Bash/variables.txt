# using variables in bash

There are a number of different methods to invoke variables within bash. The single quotes show a literal 
translation of the element inside. The double quotes allow for the calling of an already created variable. 
Using the $var1 will return the value assigned to var1. Using the backticks ``, works as a shell within a shell. 
It allows for dynamic variable creation. This method is backward compatible. The modern way of presenting this 
method is to use parenthesis and the dollar sign $(). Therefore the item inside the parenthesis will act as the 
shell within a shell. 

NOTE : make sure that there are no spaces surrouding the creation of a variable

expr : can be used to work with numeric variables
bc : basic calculator, can be used to invoke a calculator, have to quit to exit

# Get first ARGV into variable
temp_f=$1

# Subtract 32
temp_f2=$(echo "scale=2; $temp_f - 32" | bc)

# Multiply by 5/9 and print
temp_c=$(echo "scale=2; $temp_f2 * 5 / 9" | bc)

# Print the celsius temp
echo $temp_c

# Create three variables from the temp data files' contents
temp_a=$(cat temps/region_A$1)
temp_b=$(cat temps/region_B$1)
temp_c=$(cat temps/region_C$1)

# Print out the three variables
echo "The three temperatures were $temp_a, $temp_b, and $temp_c"
